It is time to create something!
-> A small webpage with a blog structure is chosen.

It is gonna be done with flask, python.

My steps so far:

I. GETTING STARTED

1). Create a new virtual environment for the project, named 'flaskblog'.

2). Create a new folder on a desktop and set path there. ( WHY? For no reason)

3). Go to the flask page on-line and copy code from there, which does:
Creates an instance of flask object (it is the project itself), start it from the terminal.
Runs the web server. @app.route('/home') -> can navigate into the 'directories' on the web server.
Good practice is to check source code of the webpage after changes.

4). Created /home and /about, which are empty yet.

5). To automatically make server update itself, without restarting it -> one should use debug mode (idk why, but it is so).
if __name__ == '__main__':
    app.run(debug=True)


II. TEMPLATES

1). Running webpage source code from def homepage(): return ...
will become real messy if we do it this way very soon, thus -> create templates folder, where i put code for each webpage separately
(my shortcut for creating minimal html code in sublime text is 'html, press tab')
this templates have to be rendered inside functions by a render function -> import render_template, to be able to be executed
inside a func, representing the page -> return render_template(<filename>) <- the one from the templates folder

2). I have created somu dummy data, namely blog posts. Inside a render_template function i command it to use this posts variable to make it
available in the template (in particular in home func)
-> render_template('home.html', posts=posts) <- makes variable posts from the main file (so far) in a template,
 and fixes posts(which is a list of dictionary) contents inside posts variable.

3). To insert codeblocks inside html -> {%<code here>%} in this templating engine (Ginger2 for flask)
i made a for loop, we are looping through the posts and returning some stuff {{notation is used for returning smth}}

4). Lets add a title. If there is no title -> Use default (flaskapp or smth)
For homepage webpage sees that there is no title passed, it will use the default one,
For About page, the title is passed, so it is printing it out.
So far the code in About and Home templates looks almost the same

5). Lets use template inheritance. New file layout.html will include info about the templates.
I create a block in a layout. The block is the part other templates will provide their code to. The canvas is from the layout.html.
In templates i only keep stuff, which is unique for the template (homepage, about etc).
In layout.html a codeblock was created. This block can be filled with stuff i provide inside templates
{% extends "layout.html" %} <- put into this file, {% block content %} <- content is the name of the block in layout.html
<code i insert (<h1> About Page </h1>)> - {% endblock content %} <- i command: close the block!
The templated versions will give in their specific info to the <body>.

6). Lets use bootstrap for adding nice styles to the website.
i open the starter page.
I grab metatags and css from there and put it into the layout <head>
Javascript stuff -> into body
also add some stuff to add good spacing etc.
grab snippets from someone else to make a navigation and other design stuff

7). Additional design files that are static (JS, CSS) need to be located in a 'static' directory
i will pull main.css into the webpage to format it etc. with the help of url_for function


III. FORMS AND USER INPUT

1). I need registration form and some other forms.
I am not going to invent a wheel and build validation from scratch, i will download is from somewhere.
pip install flask-wtf. (that is not 'what the f~')
My registration form inherits from FlaskForm from flask_wtf

2).StringField - is just a typing field for smth (email, username or etc)
StringField(<What will be preritten in this field>, <validators=[from wtforms.validators import DataRequiered, Length, Email, EqualTo or something]>)
PasswordField - fiels specificly made for passwords
The registration form requires some constraints,
=> username has to be a string of certain length
Thus i use validators from wtforms.validators, this class will validate stuff
-> StringField('Username', validators=[<my validators here, e.g. DataRequired(empty not allowed), Length(min=n, max=m)>])
=> email has to be a string of certain length
-> StringField('Email', validators=[DataRequired(), Email()-has to be formatted as email, not a random string])
=> password should match my criteria, put them into the validators
-> password = PasswordField('Password', validators=[DataRequired(), Length(min=2)])
=> Confirm password
-> = PasswordField('Password confirmation',
        validators=[EqualTo('password')])
=> submit = StringField('Sign Up') Will create something like a button

3). LoginForm has also to be present
i will add a remember field - gonna be BooleanField

4). Some security stuff has to be added, idk how this works actually, but i generate secret key in python
secrets.token_hex(16) => ...
app.config['SECRET_KEY'] = '...'

5). Now i have to make separate pages for the registration and login, as already did for home and about
in register template i make a small table using css and stuff to make fields to type in
Now, when the form is ready, i test registration, but it prints out that the method is not allowed
i go to the flaskblog.py and add methods to @app_route for the /register
 @app.route('/register', methods=['GET', 'POST'])
Now after the registration nothing happens
i want some actions from the site -> validate on submit
i can use flash message, which is in flask -> from flask import flash
so the alert is raised and i redirect the user to the homepage
-> url_for('home') # url_for redirects to a function, that leads to the route
In layout i copypaste code to generate alert messages
I copypaste code to alert mistakes if invalid registration

6). All the same for the login form.
I make a code for mocking the login, and copypasted the code to make alerts
to show success or fail

7). Pushed to GitHub for the first time


IV. DATABASE WITH FLASK-SQLALCHEMY

1). To be able to work with the database, I need some tool, is this case it will be SQLAlchemy package and I work for now with SQLite, because it is the easiest to start with. My database so far will be stored as a file on the computer.
So I import the module and add into the app.config a key-value:
-> app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite///<relative path from the current path>'
And I have to create a database instance
-> ab = SQLAlchemy(app)
Now I have my database instance
The structure of the database will be represented as a system of classes
There will be a separate class for a User.
 !!!https://flask-sqlalchemy.palletsprojects.com/en/2.x/models/!!!
User will have an id (db.Column, primary_key=True) and it is a main feature of a user, his id
User will have a username of max length I have provided in a registration form, it is a unique attribute (unique=True), nullable=False)
Almost the same for the email attribute
I also add the attribute for the image_file. Each user starts with a default profile image, so it is not unique, and there is a default='default.jpg'

2). Post is a separate class, each post has an id, date posted, by default it is the current time from the date time module
User and Post classes are in relation (multiple to many) which means that a User can have multiple posts, thus I say that a user model will have a relationship on the db level with the post
https://docs.sqlalchemy.org/en/13/orm/backref.html
Relationship between user and post is established.
Now, when the classes are ready it is time to start the db.
In terminal I import a db from my app, then I db.create_all() to create the database, consisting of tables I specified for the users and posts. A new file representing the database was created. (Site.db that I have specified)
To see how this all works, I import my models -> User and Post models
I also create instances of the imported classes. user_1 = User(username=..., pass=..., ...) default and unique values are assigned automatically. Classes take keyword arguments. Users are also to be added into the db.
https://flask-sqlalchemy.palletsprojects.com/en/2.x/queries/
Do not forget to commit and Eureka!
So, as user is a db.Model he seems to be committed to the user database, I am able to access its attributes

I will create a post too. It is only possible to do, after I get a user from the db.


V. PACKAGE STRUCTURE

1). At this point the flaskblog does not have a proper structure. Example: I want to move out my models from the main file (db models are going to be stored is another file). Because of the way my imports are created it is not possible to do a cross reference.
Project structure is to be reorganised.
2). I am creating an __init__, where my imports are to be stored, also the database inititation. I create routes.py for the routes separately. So in the original file there is only an if statement to run the application. Now the main file is called run.py
Now to import stuff I use 'from flaskblog(a folder ewith everything) import app. App variable is inside __init__.py
It is better to separate all logical parts of the app into the separate files and then clean up the imports.
The variables from init seem to be in global environment, so I can grab them just typing from <directory name with init> import <variable I need>

.
├── How?.txt
├── flaskblog
│   ├── __init__.py
│   ├── forms.py
│   ├── models.py
│   ├── routes.py
│   ├── site.db
│   ├── static
│   │   └── main.css
│   └── templates
│       ├── about.html
│       ├── home.html
│       ├── layout.html
│       ├── login.html
│       └── register.html
└── run.py

This is the tree structure of the app so far. 
-> __init__.py initialises all general stuff for the app (db, the app itself
 'app = Flask(__name__)'
-> FORMS contain the registration form and login form
(https://flask.palletsprojects.com/en/1.0.x/patterns/wtforms/ and https://flask-login.readthedocs.io/en/latest/)
-> MODELS are instances of the tables, from which my database consists of. 
(https://flask-sqlalchemy.palletsprojects.com/en/2.x/models/)
-> ROUTES are tools to say the app which url to go to when route() is run.
(https://hackersandslackers.com/the-art-of-building-flask-routes/ and https://flask.palletsprojects.com/en/1.1.x/quickstart/)
-> site is just a database file (so far, I could have deleted but I did not)
-> STATIC and TEMPLATES are things for generating the webpages, which I have mostly no-brainly stolen.

Pushing to the GitHub!
